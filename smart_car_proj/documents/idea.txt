
/*
背景：伪装头车攻击概念
现有俩小车AB在路上跑，头车A发信给跟车B，跟车B和头车A跑的很欢。
突然来了辆小车C，小车C通过截获头车A的数据包，知道A在给B发啥，然后就根据数据包的格式
去伪造数据包，或者修改原有数据包，或者过一段时间重新发送该数据包
由于数据包的发送是在应用层的，所以只要伪造了应用层数据和网络层的头部再发送，
B就不知道这个数据包的合法性了
这样很容易造成破坏，所以要搞个验证的过程。
PS:但是我不知道我们现有的通信数据中是否有包含数据包的序列，这个先不谈
*/

/*
目的：这个函数是用来检查这个数据包的合法性的
步骤：
1.其中传进来的packet是数据包的指针，包含数据包的头部，明文部分，签名部分以及校验和
3.先计算头部+明文部分+签名部分的校验和与数据包中的校验和是否正确，确定数据包没被修改
4.再获取头部中的源地址，计算出发送者的公钥
5.利用公钥解密签名，获取hash值
6.计算明文的hash值，与上一步的hash结果对比，不相等则返回-1
7.若相等则获取明文中的时间戳部分，时间戳和本地时间的差值大于1s，则返回-1
8.若相等则返回1

其中src为源地址，4字节长，dst为目的地址，4字节长，len为明文部分数据段长度，2字节长，明文部分长度可变，最后填充至头部，Certification为签名，定长为128位（16字节长），CRC为32位（4字节长）
data段中可能还需要一些字段来标识我们用的n是啥，就是公钥中的信息，其中e是由src计算，但是n得传输，也可以让n位预设，但是这不妥
图示

===============================================================
|Src|Dst|Len|n值	|Data			|Signature			  	|CRC  |
===============================================================
4	4	2	4	XX				16						4
				  	|		|
				  	|		|
				  	|		|
				  	\		/
				  	 \	   /
				  	  \   /
			============================
			|TimeStamp	  |Operation   |
			============================			
			8
*/
int check(char * packet,int length){
	if(!checkCRC(packet,length))
		return -1;
	PublicKey = getPublicKey(packet，4);
	length=atoi(packet+8,2);
	hashNew=decrptSig(packet+14+length,16,PublicKey); //解密出的hash值
	hashOld=hash(packet+14,lenth); //计算出的hash值
	if(hashOld!=hashNew)
		return -1;
	timeStamp=getTimeStamp(packet+14,8);	//获得明文中的时间戳
	if(getCurrentTimeStamp()>=timeStamp||timeStamp-getCurrentTimeStamp()>1000)
		return -1;
	return 1;
}

/*
目的：检查CRC值的正确性
步骤：
1.先是获取报文中的CRC值
2.计算头部+明文+签名的校验和
3.比较，若一致则返回1，不一致则返回-1

*/
int checkCRC(char* p,int length);

/*
目的：获取公钥
步骤：
1.获取报文中的源地址
2.计算其密钥

这个问题就在于获取了源地址后怎么去转换成公钥，或者是直接转换成一一对应的一个公钥e，与或预设或在数据包中存放的某个段值
（这个作为明文存放有没有什么问题呢）
*/
PublicKey getPublicKey(char* p,int length);

/*
目的：获得数据长度
步骤：
将length域的asc转换为数值
*/
int atoi(char * p,int length);

/*
目的：解密签名
步骤：
1.获取签名
2.获取公钥
3.将签名与公钥传入加解密芯片的api，让芯片工作
4.返回api的结果

将公钥和签名输入芯片的方法还得再想
*/
char * decrptSig(char * p,int length,PublicKey PublicKey);

/*
目的：计算hash值
步骤：
1.输入明文段
2.进行hash计算
3.返回hash值

得设定一个hash算法
*/
char * hash(char* p ,int length);

/*
目的：获取报文中的时间戳
步骤：
获取报文中的时间戳
*/
char * getTimeStamp(char * p,int length);

/*
目的：获取当前时间
步骤，系统api
*/
char * getCurrentTimeStamp();

/*
密钥生成
先生成一个公钥的e，然后调用芯片的api，算出自身的私钥d，同时还有两个大素数pq,以及n,(p-1)*(q-1)
这个也和芯片的接口有关
*/

/*
加密过程
先将数据用hash函数计算出散列值
将散列值和私钥输入芯片，让芯片算出个签名值
*/

/*
数据封装成数据包的过程
===============================================================
|Src|Dst|Len|n值	|Data			|Signature			  	|CRC	  |
===============================================================
4	4	2	4	XX				16						4
				  	|		|
				  	|		|
				  	|		|
				  	\		/
				  	 \	   /
				  	  \   /
			============================
			|TimeStamp	  |Operation   |
			============================			
			8
该填的填，该算的算
*/